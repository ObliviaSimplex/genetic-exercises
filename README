 ____  _____    _    ____  __  __ _____ 
|  _ \| ____|  / \  |  _ \|  \/  | ____|
| |_) |  _|   / _ \ | | | | |\/| |  _|  
|  _ <| |___ / ___ \| |_| | |  | | |___ 
|_| \_\_____/_/   \_\____/|_|  |_|_____|
                                        

GENLIN is an experimental linear genetic programming platform, which
can be put to work on more or less any dataset of the appropriate
formate (CSV files containing rows of numerical attributes, followed
by a nominal label, work out of the box; a bit of hacking is needed
to get the algo to play well with purely nominal datasets, like the
included tic-tac-toe.data). 

The code base is entirely written in Common Lisp (for SBCL, but it
wouldn't be too much work to port it to, say, CLISP, so that it can
be run on Windows, should anyone want to do such a thing; really, 
all that needs to be done to get this to happen is to replace calls
to sb-thread with the Bordeaux thread library. 

In a nutshell: GENLIN uses natural selection to develop programmes,
written in a virtual machine code, to solve classification problems. 
The problems that the current version works with are not, in any
sense, interesting problems, but tweaking and observing an evolving
population of algorithms can be fun. 

UPDATE: an extended set of thirty-some machine instructions has been
added, along with support for breeding 'packs' of algorithms that
operate in a hierarchical fashion. 

To compile a standalone binary (assuming you have SBCL installed
somewhere on your system):

make

This will generate a (large) binary file called "genlin". Run it, 
and follow the prompts. 

To run interactively, from the REPL:

sbcl --load genlin.lisp

Call (menu) to get a warm welcome, or just poke around and call 
the configuration and evolution functions directly, starting with
(setup). Setup takes many optional parameters. Consult the source
code for details. 

Beware of cruft.

;; It is now 18:17:37 on Tuesday, 9/02/2016 (GMT-4)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                                 GENLIN
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Many of the dynamic (global) parameters in GENLIN can be set using
familiar POSIX-style command line argument syntax. Valid options and
the default values of the parameters they modify are printed below.
Note that quotation marks must be escaped for string arguments, but
keywords (prefixed by a colon) need no quotes.

[0] --menu  NIL
     Set to t if you would like to see a menu, from which the parameters
     can be set.
[1] --debug  NIL
     The debugging flag. If set to T, then you will be treated to a very
     verbose, live disassembly of the instructions being excuted in the
     virtual machine, along with a few other pieces of information. Do
     not use in conjunction with *parallel.*
[2] --gc  NIL
     NIL
[3] --stat-interval  200
     Number of cycles per verbose update on the evolutionary process.
[4] --parallel  NIL
     Enables multithreading when set to T, allotting the evolutionary
     process on each island its own thread.
[5] --dataset  :IRIS
     Just the name for your dataset. Mostly used for labelling output,
     with the exception of :tictactoe, which tells the programme to use a
     particular data-processing module. More a hook for customizaiton
     than anything else.
[6] --data-path  "~/Projects/genlin/datasets/Iris/iris.data"
     Path to the data file. Mismatching *data-path* and *dataset* will
     almost certainly break something, at the moment.
[7] --testing-data-path  NIL
     Specify an independent testing dataset. If left as nil, then the
     main dataset will be partitioned according to --training-ratio.
[8] --split-data  T
     Set to nil to use the same dataset for both training and testing. I
     won't judge. *TRAINING-RATIO* is ignored if this is to set to nil.
[9] --scale-data  NIL
     Apply scaling function to keys in the hashtable, when using numeric
     data. Accepts a keyword value of: :linear-transform,
     or :mean-variance. Data used as-is if set to nil.
[10] --training-ratio  4/5
     The ratio of training cases to total cases (the remainder being
     reserved for testing.
[11] --selection-method  :LEXICASE
     Determines which selection method will be used to select the parents 
    of each subsequent generation. Accepts as values the keywords: 
    :tournement, :roulette, :greedy-roulette, or :lexicase.
[12] --lexicase-combatant-ratio  1
     NIL
[13] --lexicase-elitism  3/4
     NIL
[14] --case-storage  NIL
     For efficiency at the cost of memory allocation, set to T and have
     creatures store hash-tables of the testing cases they are able to
     correctly classify. Principally for use with the Lexicase selection
     method.
[15] --number-of-islands  8
     Islands are relatively isolated pockets in the population, linked
     in a ring structure and bridged by occasional migration. Can be set
     to any integer > 0.
[16] --population-size  800
     Remains constant throughout the evolution. Should be > 40.
[17] --packs  T
     NIL
[18] --pack-count  100
     The number of packs to establish on an island, once pack-formation
     begins.
[19] --pack-thresh-by-fitness  0.9
     If *PACKS* is set to T, then pack formation will begin on an island
     when its best fitness score surpasses *PACK-THRESH-BY-FITNESS*.
[20] --pack-thresh-by-era  2000
     If *PACKS* is T, then pack-formation will begin on an island once
    it surpasses this era.
[21] --pack-thresh-by-difficulty  100
     If *PACKS* and *CASE-STORAGE* are both set to T, then pack
     formation will begin on an island when it has witnessed
     *PACK-THRESH-BY-DIFFICULTY* successful classifications of its most
     difficult (least-often-correctly-classified) case.
[22] --pack-selection-method  :LEXICASE
     NIL
[23] --sex  :1PT
     Sexual reproduction used when set to T. Cloning, otherwise (with
     mutation).
[24] --mutation-rate  3/10
     Chance of mutation per spawning event, expressed as percentage.
[25] --mingle-rate  2/3
     NIL
[26] --metamutation-rate  1/10
     If over 0, then the rate of mutation is localized for each creature, and is     itself susceptible to mutation.
[27] --migration-rate  200
     Frequency of migrations, measured in generations.
[28] --migration-size  1/10
     Fraction of population that leaves one deme for the next, per
     migration event.
[29] --greedy-migration  1
     If set to 1, migrants are always the fittest in their deme. If set to a
     fraction lesser than 1, then migrants will be the top *migration-size*
     percent of a randomly-selected *greedy-migration* fraction of the
     deme.
[30] --max-pack-size  8
     NIL
[31] --track-genealogy  NIL
     If set to T, then genealogical lineage and statistics are computed
     at runtime. Informative, but increases overhead.
[32] --min-len  2
     The minimum creature length, measured in instructions.
[33] --max-len  256
     The maximum creature length, measured in instructions.
[34] --ttl  256
     How many instructions can be executed in a sequence before the
     execution halts? Typically set to a multiple of *max-len* ((*
     *max-len* 1), for example).)
[35] --max-start-len  25
     The maximum length of creatures in the initial population.
[36] --remove-introns  NIL
     NIL
[37] --maxval  65536
     NIL
[38] --opstring  NIL
     The user may supply a list of opcode mnemonics to reconfigure the
     virtual machine's primitive instruction set. These operations
     should be entered as keywords, separated by commas, with no
     spaces. (UNSTABLE.)
[39] --opcode-bits  4
     The number of bits in an instruction used to determine the operation. 
     Can be set to 1, 2, 3, or 4.
[40] --operations  #(#<FUNCTION GENLIN::ADD> #<FUNCTION GENLIN::SUB>
                     #<FUNCTION GENLIN::DIV> #<FUNCTION GENLIN::MUL>
                     #<FUNCTION GENLIN::BIN> #<FUNCTION GENLIN::NIB>
                     #<FUNCTION GENLIN::NBN> #<FUNCTION GENLIN::CAL>
                     #<FUNCTION GENLIN::LOD> #<FUNCTION GENLIN::STO>
                     #<FUNCTION GENLIN::LEA> #<FUNCTION GENLIN::MOV>
                     #<FUNCTION GENLIN::XOR> #<FUNCTION GENLIN::IOR>
                     #<FUNCTION GENLIN::CNJ> #<FUNCTION GENLIN::PMD>
                     #<FUNCTION GENLIN::CMP> #<FUNCTION GENLIN::JMP>
                     #<FUNCTION GENLIN::JLE> #<FUNCTION GENLIN::HLT>
                     #<FUNCTION GENLIN::PSH> #<FUNCTION GENLIN::PRG>
                     #<FUNCTION GENLIN::PEX> #<FUNCTION GENLIN::PIN>
                     #<FUNCTION GENLIN::CLR> #<FUNCTION GENLIN::HLT>
                     #<FUNCTION GENLIN::NOP> #<FUNCTION GENLIN::NOP>
                     #<FUNCTION GENLIN::NOP> #<FUNCTION GENLIN::NOP>
                     #<FUNCTION GENLIN::NOP> #<FUNCTION GENLIN::NOP>)
     NIL
[41] --source-register-bits  3
     The number of bits used to calculate the source register in each
     instruction. 2^n readable registers will be allocated where n is the
     value of this parameter.
[42] --destination-register-bits  2
     The number of bits used to calculate the destination register. If
     left smaller than *source-register-bits* then there will be 2^(n-m)
     read-only registers, where n is the value of *source-register-bits*
     and m is the value of this parameter.
[43] --max-cal-depth  1
     Determines how many nested function calls are permitted, though CAL
     and BIN, in the virtual machine. What is gained in expressive
     power is paid for in time and island desynchronization.
[44] --rounds  10000
     The evolution will run until either a total number of mating events
     have elapsed on each island, or a pre-established fitness target
     has been reached. This determines the former.
[45] --target  0.95
     The evolution will run until either a total number of mating events
     have elapsed on each island, or a pre-established fitness target
     has been reached. This determines the latter.
[46] --verbose-report  T
     Print a thorough report of GP results on the testing set. You might
     want to disable this for very large datasets.
[47] --save-every  1000
     Save the island ring every *SAVE-EVERY* rounds. Not a bad idea, so
     long as memory fault bugs persist.
[48] --restore-island-ring  NIL
     Loads a saved island ring from supplied path name.
[49] --params-path  NIL
     An parameter file can be supplied, if desired. It should consist of
     a series of Lisp S-expressions of the form 
     (setf *PARAMETER-NAME* parameter-value)
[50] --last-params-path  "LAST-PARAMS.SAV"
     File in which to store the parameters used on the last run.
