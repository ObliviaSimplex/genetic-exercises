 ____  _____    _    ____  __  __ _____ 
|  _ \| ____|  / \  |  _ \|  \/  | ____|
| |_) |  _|   / _ \ | | | | |\/| |  _|  
|  _ <| |___ / ___ \| |_| | |  | | |___ 
|_| \_\_____/_/   \_\____/|_|  |_|_____|
                                        

GENLIN is an experimental linear genetic programming platform.
The front-end only offers the opportunity to plug two, pre-supplied
benchmark datasets into the thing -- tic-tac-toe endgames, and the 
well-worn iris set -- but the code should be flexible enough to be
put to work on other problem domains (not necessarily restricted to
classification problems), if you don't mind hacking it a little. 

The code base is entirely written in Common Lisp (for SBCL, but it
wouldn't be too much work to port it to, say, CLISP, so that it can
be run on Windows, should anyone want to do such a thing; really, 
all that needs to be done to get this to happen is to replace calls
to sb-thread with the Bordeaux thread library. 

In a nutshell: GENLIN uses natural selection to develop programmes,
written in a virtual machine code, to solve classification problems. 
The problems that the current version works with are not, in any
sense, interesting problems, but tweaking and observing an evolving
population of algorithms can be fun. 

To compile a standalone binary (assuming you have SBCL installed
somewhere on your system):

sbcl --script compile.lisp

This will generate a (large) binary file called "genlin". Run it, 
and follow the prompts. 

To run interactively, from the REPL:

sbcl --load genlin.lisp

Call (menu) to get a warm welcome, or just poke around and call 
the configuration and evolution functions directly, starting with
(setup). Setup takes many optional parameters. Consult the source
code for details. 


Beware of cruft.
